{"version":3,"sources":["app.js","textanalyzer.js","experiment.js","user.js","user_specific.js","groups.js","measurement.js","experiment_create.js","textmodel.js","experiments.js","users.js","landing_view.js","login.js","dashboard.js","new_experiment.js","subject_login.js"],"names":["app","urls","this","url","window","location","href","split","website","dashboard","experiments","measurement","experiment","user_specific","user_experiment","user_specific_name","user","registration","groups","textanalyzer","textdata","csv_text_data","single_experiment","run_experiment","constants","editor_textinput","toast_textinput","simpleRevisionModal","getExperimentId","path","experiment_id","substr","lastIndexOf","regExText","id","textToChange","$","html","replace","getParagraphs","div","paragraphs","find","paragraphText","each","paragraph","innerText","escapeRegExp","str","replaceAll","RegExp","getCookie","name","cookieValue","document","cookie","cookies","i","length","jQuery","trim","substring","decodeURIComponent","csrfSafeMethod","method","test","sameOrigin","host","protocol","sr_origin","origin","slice","highlightWholeText","divId","clusters","colors","textParagraph","text","colorText","newText","newTextSplit","$1","splitWord","cluster","inArray","join","highlightSelectedWord","wordSelected","wordsUnselected","lemmaDic","updateWordsUnselected","bah","dicLemma","lemma","push","p","indexOf","usedWords","j","lemmaWord","foo","unselectedWord","getLinksNodes","wordpairs","links","uniqueLinks","nodes","edges","forEach","pair","el","index","source","target","graph","TextAnalyzerModel","Backbone","Model","extend","ExperimentModel","defaults","nr_measurements","nr_groups","UserModel","UserSpecificModel","GroupsModel","MeasurementModel","ExperimentsModel","TextModelComplete","pre_text","post_text","pre_num_sentences","post_num_sentences","pre_num_clusters","post_num_clusters","pre_num_coherent_sentences","post_num_coherent_sentences","pre_num_non_coherent_sentences","post_num_non_coherent_sentences","pre_page_duration","post_page_duration","pre_num_concepts","post_num_concepts","ExperimentsCollection","Collection","UserCollection","MeasurementCollection","model","LandingView","View","events","click #editor-button","click #editor-full-button","initialize","d3","scaleOrdinal","schemeCategory10","$el","Handlebars","templates","editor","instruction","MediumEditor","toolbar","placeholder","localStorage","getItem","typed","strings","typeSpeed","contentType","cursorChar","callback","editableElement","querySelector","firstChild","selectElement","analyzer","analyzeText","self","set","save","success","response","renderGraph","error","console","log","responseText","Materialize","toast","reanalyzeText","paragraphDiv","full","mediumEditor","graphDiv","get","svgWidth","width","svgHeight","height","empty","renderCmap","append","openModal","setItem","pairs","numConcepts","numClusters","svgID","ticked","link","attr","d","x","y","node","xTest","Math","max","min","yTest","dragstarted","event","active","simulation","alphaTarget","restart","fx","fy","dragged","dragended","mouseout","selectAll","style","mouseover","mouse","obj","nodeSelected","filter","select","isConnected","a","b","isConnectedAsTarget","isConnectedAsSource","linkedByIndex","margin","top","right","bottom","left","svg","forceSimulation","force","forceLink","forceManyBody","strength","forceCenter","forceCollide","iterations","g","on","data","enter","call","drag","pathname","LoginView","DashboardView","click .table-row","fetch","renderExperiments","toJSON","redirect","idExperiment","currentTarget","ExperimentView","click #new-user-button","click #data-export-button","singleExperimentModel","renderHeader","fetchUsers","collection","renderUsers","first","users","generateUser","nr_users","dataExport","open","startsWith","NewExperimentView","click #add-measurement","click #save-experiment","groupsModel","renderForm","measurementCollection","measurementModel","experimentModel","listenTo","modelChanged","measurements",1,2,3,4,5,"group","material_select","pickadate","selectMonths","selectYears","format","add","renderTable","addMeasurement","val","treatment","date","publication","measure","nr_group","Number","saveExperiment","experimentName","Set","size","saveMeasurements","lengthCollection","SubjectLoginView","submit form","submit","preventDefault","username","tidyUsername","toLowerCase","regex","csrftoken","ajax","beforeSend","xhr","settings","type","setRequestHeader"],"mappings":"AAAA,GAAAA,KAAAA,OAKAA,KAAAC,KAAA,WACAC,KAAAC,IAAAC,OAAAC,SAAAC,IACAJ,MAAAC,IAAAI,MAAA,IAwBA,OAtBAL,MAAAC,IAAAC,OAAAC,SAAAC,KACAJ,KAAAK,MAAAL,KAAAC,IAAAI,MAAA,KACAL,KAAAM,QAAAN,KAAAK,MAAA,GAAA,KAAAL,KAAAK,MAAA,GACAL,KAAAO,UAAAP,KAAAM,QAAA,cAGAN,KAAAQ,YAAAR,KAAAM,QAAA,qBACAN,KAAAS,YAAAT,KAAAM,QAAA,sBACAN,KAAAU,WAAAV,KAAAM,QAAA,oBACAN,KAAAW,cAAAX,KAAAM,QAAA,uBACAN,KAAAY,gBAAAZ,KAAAM,QAAA,yBACAN,KAAAa,mBAAAb,KAAAM,QAAA,4BACAN,KAAAc,KAAAd,KAAAM,QAAA,yBACAN,KAAAe,aAAAf,KAAAM,QAAA,sBACAN,KAAAgB,OAAAhB,KAAAM,QAAA,gBACAN,KAAAiB,aAAAjB,KAAAM,QAAA,sBACAN,KAAAkB,SAAAlB,KAAAM,QAAA,kBACAN,KAAAmB,cAAAnB,KAAAM,QAAA,oBAEAN,KAAAoB,kBAAApB,KAAAM,QAAA,eACAN,KAAAqB,eAAArB,KAAAM,QAAA,mBAEAN,QAMAF,IAAAwB,UAAA,WAWA,MAVAtB,MAAAuB,kBAAA,yDACA,4HACAvB,KAAAwB,iBAAA,iIAEAxB,KAAAyB,oBAAA,4eAMAzB,QAOAF,IAAA4B,gBAAA,WACA,GAAAC,GAAAzB,OAAAC,SAAAC,KACAwB,EAAAD,EAAAE,OAAAF,EAAAG,YAAA,KAAA,EAEA,OAAAF,IAGA9B,IAAAiC,UAAA,SAAAC,GACA,GAAAC,GAAAC,EAAA,qBAAAC,MAGAF,GAAAA,EAAAG,QAAA,yCAAA,yBAGAH,EAAAA,EAAAG,QAAA,kCAAA,0BACAH,EAAAA,EAAAG,QAAA,kCAAA,0BACAH,EAAAA,EAAAG,QAAA,kCAAA,0BACAH,EAAAA,EAAAG,QAAA,uBAAA,kBACAH,EAAAA,EAAAG,QAAA,wBAAA,kBACAH,EAAAA,EAAAG,QAAA,sBAAA,gBAEAH,EAAAA,EAAAG,QAAA,SAAA,mBAMAF,EAAAF,GAAAG,KAAAF,IAOAnC,IAAAuC,cAAA,SAAAC,GAEA,GAAAC,GAAAD,EAAAE,KAAA,KAIAC,EAAA,EAYA,OAXAF,GAAAG,KAAA,SAAAC,GAEAF,GAAAF,EAAAI,GAAAC,UAAA,MAIAH,EAAAL,QAAA,iBAAA,IAGAK,EAAAL,QAAA,SAAA,IAEAK,GAOA3C,IAAA+C,aAAA,SAAAC,GACA,MAAAA,GAAAV,QAAA,sBAAA,SAGAtC,IAAAiD,WAAA,SAAAD,EAAAN,EAAAJ,GACA,MAAAU,GAAAV,QAAA,GAAAY,QAAAR,EAAA,KAAAJ,IAmBAtC,IAAAmD,UAAA,SAAAC,GACA,GAAAC,GAAA,IACA,IAAAC,SAAAC,QAAA,KAAAD,SAAAC,OAEA,IAAA,GADAC,GAAAF,SAAAC,OAAAhD,MAAA,KACAkD,EAAA,EAAAA,EAAAD,EAAAE,OAAAD,IAAA,CACA,GAAAF,GAAAI,OAAAC,KAAAJ,EAAAC,GAEA,IAAAF,EAAAM,UAAA,EAAAT,EAAAM,OAAA,IAAAN,EAAA,IAAA,CACAC,EAAAS,mBAAAP,EAAAM,UAAAT,EAAAM,OAAA,GACA,QAIA,MAAAL,IAGArD,IAAA+D,eAAA,SAAAC,GAEA,MAAA,6BAAAC,KAAAD,IAGAhE,IAAAkE,WAAA,SAAA/D,GAGA,GAAAgE,GAAAb,SAAAjD,SAAA8D,KACAC,EAAAd,SAAAjD,SAAA+D,SACAC,EAAA,KAAAF,EACAG,EAAAF,EAAAC,CAEA,OAAAlE,IAAAmE,GAAAnE,EAAAoE,MAAA,EAAAD,EAAAZ,OAAA,IAAAY,EAAA,KACAnE,GAAAkE,GAAAlE,EAAAoE,MAAA,EAAAF,EAAAX,OAAA,IAAAW,EAAA,MAEA,yBAAAJ,KAAA9D,IAaAH,IAAAwE,mBAAA,SAAAC,EAAAC,EAAAC,GACAvC,EAAAqC,GAAA/B,KAAA,KAAAE,KAAA,SAAAC,GACA,GAAA+B,GAAAxC,EAAAlC,MAAA2E,MACAzC,GAAAlC,MAAAmC,KAAArC,IAAA8E,UAAAF,EAAA1E,KAAAwE,EAAAC,OAKA3E,IAAA8E,UAAA,SAAAD,EAAAhC,EAAA6B,EAAAC,GAYA,IAAA,GATAI,GAAAF,EAMAG,GAHAH,EAAAvC,QAAA,6BAAA,IAAA/B,MAAA,KAGAwE,EAAAzC,QAAA,qBAAA,SAAA2C,GAAA,MAAA,IAAAA,EAAA,MAAA3C,QAAA,QAAA,KAAA/B,MAAA,MAGAkD,EAAA,EAAAA,EAAAuB,EAAAtB,OAAAD,IAGA,IAAA,GAFAyB,GAAAF,EAAAvB,GAEA0B,EAAA,EAAAA,EAAAT,EAAAhB,OAAAyB,IACA,IAAA/C,EAAAgD,QAAAF,EAAAR,EAAAS,MACAH,EAAAvB,GAAAyB,EAAA5C,QAAA4C,EACA,+BACAP,EAAAQ,GAAA,qEAAAA,EAAA,KACAD,EAAA,QAKA,OAAAF,GAAAK,KAAA,MAGArF,IAAAsF,sBAAA,SAAAb,EAAAc,EAAAC,EAAAC,EAAAf,EAAAC,GAMA,IAAA,GAHAe,MAGAC,EAAA,EAAAA,EAAAH,EAAA9B,OAAAiC,IAKA,IAAA,GAHAC,GAAAH,EAAAD,EAAAG,IAGAE,EAAA,EAAAA,EAAAD,EAAAlC,OAAAmC,IAEAH,EAAAI,KAAAF,EAAAC,GAKAL,GAAAE,EAGAtD,EAAAqC,GAAA/B,KAAA,KAAAE,KAAA,SAAAC,GAOA,IAAA,GANA+B,GAAAxC,EAAAlC,MAAA2E,OAGAM,EAAA,KAGAY,EAAA,EAAAA,EAAArB,EAAAhB,OAAAqC,IACA,IAAArB,EAAAqB,GAAAC,QAAAT,KACAJ,EAAAY,EAgBA,KAAA,GAXAhB,GAAAH,EAMAI,GAHAJ,EAAAtC,QAAA,6BAAA,IAAA/B,MAAA,KAGAwE,EAAAzC,QAAA,qBAAA,SAAA2C,GAAA,MAAA,IAAAA,EAAA,MAAA3C,QAAA,QAAA,KAAA/B,MAAA,MAGA0F,KAEAxC,EAAA,EAAAA,EAAAuB,EAAAtB,OAAAD,IAAA,CAEA,GAAAyB,GAAAF,EAAAvB,EAGA,IAAA,IAAArB,EAAAgD,QAAAF,EAAAR,EAAAS,IAAA,CAEA,IAAA,GAAAe,GAAA,EAAAA,EAAAT,EAAAF,GAAA7B,OAAAwC,IAAA,CACA,GAAAC,GAAAV,EAAAF,GAAAW,EAEAhB,KAAAiB,IACAF,EAAAH,KAAAK,GAGAnB,EAAAvB,GAAAyB,EAAA5C,QAAA4C,EACA,+BACAP,EAAAQ,GAAA,yGAAAA,EAAA,KACAD,EAAA,SAKA,IAAA,GAAAkB,GAAA,EAAAA,EAAAZ,EAAA9B,OAAA0C,IAAA,CAEA,GAAAC,GAAAb,EAAAY,EAIAlB,KAAAmB,IAGAJ,EAAAH,KAAAO,GAGArB,EAAAvB,GAAAyB,EAAA5C,QAAA4C,EACA,+BACAP,EAAAQ,GAAA,oFAAAA,EAAA,KACAD,EAAA,WAcA9C,EAAAlC,MAAAmC,KAAA2C,EAAAK,KAAA,SAIArF,IAAAsG,cAAA,SAAAC,GAEA,GAAAC,MACAC,KACAC,KACAC,IAGAJ,GAAAK,QAAA,SAAAC,GACAL,EAAAV,KAAAe,EAAA,IACAL,EAAAV,KAAAe,EAAA,MAIAzE,EAAAQ,KAAA4D,EAAA,SAAA/C,EAAAqD,GACA,KAAA1E,EAAAgD,QAAA0B,EAAAL,IAAAA,EAAAX,KAAAgB,KAGA1E,EAAAQ,KAAA6D,EAAA,SAAAhD,GACAiD,EAAAZ,MAAAiB,MAAAtD,EAAAvB,GAAAuE,EAAAhD,OAKArB,EAAAQ,KAAA2D,EAAA,SAAA9C,GAMAkD,EAAAb,MAAAkB,OAAAT,EAAA9C,GAAA,GAAAwD,OAAAV,EAAA9C,GAAA,MAKA,IAAAyD,IACAR,MAAAA,EACAF,MAAAG,EAGA,OAAAO,GCxWA,IAAAlH,KAAAA,OAEAA,KAAAmH,kBAAAC,SAAAC,MAAAC,QACAnH,IAAAH,IAAAC,KAAAkB,cCHA,IAAAnB,KAAAA,OAEAA,KAAAuH,gBAAAH,SAAAC,MAAAC,QACAE,UACApE,KAAA,GACAqE,gBAAA,GACAC,UAAA,IAGAvH,IAAAH,IAAAC,KAAAW,WAAAZ,IAAA4B,mBCTA,IAAA5B,KAAAA,OAEAA,KAAA2H,UAAAP,SAAAC,MAAAC,QACAnH,IAAAH,IAAAC,KAAAa,gBAAAd,IAAA4B,mBCHA,IAAA5B,KAAAA,OAEAA,KAAA4H,kBAAAR,SAAAC,MAAAC,QACAnH,IAAAH,IAAAC,KAAAY,cAAAb,IAAA4B,mBCHA,IAAA5B,KAAAA,OAEAA,KAAA6H,YAAAT,SAAAC,MAAAC,QACAnH,IAAAH,IAAAC,KAAAiB,QCHA,IAAAlB,KAAAA,OAEAA,KAAA8H,iBAAAV,SAAAC,MAAAC,QACAnH,IAAAH,IAAAC,KAAAU,aCHA,IAAAX,KAAAA,OAEAA,KAAA+H,iBAAAX,SAAAC,MAAAC,QACAnH,IAAAH,IAAAC,KAAAS,aCHA,IAAAV,KAAAA,OAEAA,KAAAgI,kBAAAZ,SAAAC,MAAAC,QACAnH,IAAAH,IAAAC,KAAAmB,SAAApB,IAAA4B,kBAEA4F,UACAS,SAAA,KACAC,UAAA,KACAC,kBAAA,KACAC,mBAAA,KACAC,iBAAA,KACAC,kBAAA,KACAC,2BAAA,KACAC,4BAAA,KACAC,+BAAA,KACAC,gCAAA,KACAC,kBAAA,KACAC,mBAAA,KACAC,iBAAA,KACAC,kBAAA,OCnBA,IAAA9I,KAAAA,OAEAA,KAAA+I,sBAAA3B,SAAA4B,WAAA1B,QACAnH,IAAAH,IAAAC,KAAAS,aCHA,IAAAV,KAAAA,OAEAA,KAAAiJ,eAAA7B,SAAAC,MAAAC,QACAnH,IAAAH,IAAAC,KAAAa,gBAAA,IAAAd,IAAA4B,mBJHA,IAAA5B,KAAAA,OAEAA,KAAAkJ,sBAAA9B,SAAA4B,WAAA1B,QACA6B,MAAAnJ,IAAA8H,kBKHA,IAAA9H,KAAAA,OAEAA,KAAAoJ,YAAAhC,SAAAiC,KAAA/B,QAEAR,GAAA1E,EAAA,gBAEAkH,QACAC,uBAAA,cACAC,4BAAA,iBAGAC,WAAA,WAKAvJ,KAAAyE,OAAA+E,GAAAC,aAAAD,GAAAE,kBAGA1J,KAAA2J,IAAAnH,KAAA,uBAAAL,KACAyH,WAAAC,UAAAC,QAAAC,YAAA,KAGA,IAAAD,GAAA,GAAAE,cAAA,qBACAC,SAAA,EACAC,aAAA,GAIA,IAAA,OAAAC,aAAAC,QAAA,cAEAlI,EAAA,qBAAAmI,OACAC,QAAAxK,IAAAwB,UAAAC,iBACAgJ,UAAA,EACAC,YAAA,OACAC,WAAA,GACAC,SAAA,WAEA,GAAAC,GAAAvH,SACAwH,cAAA,qBAAAC,UACAf,GAAAgB,cAAAH,UAIA,CACAzI,EAAA,qBAAAC,KAAA,2BAGA,IAAAwI,GAAAvH,SACAwH,cAAA,qBAAAC,UACAf,GAAAgB,cAAAH,GAIA3K,KAAA+K,SAAA,GAAAjL,KAAAmH,mBAMA+D,YAAA,WAEA,GAAAC,GAAAjL,KAGAuC,EAAAzC,IAAAuC,cAAArC,KAAA2J,IAAAnH,KAAA,qBAGAxC,MAAA2J,IAAAnH,KAAA,sBAAAL,KACAyH,WAAAC,UAAA,mBAGA7J,KAAA+K,SAAAG,KAAAvG,KAAApC,IACAvC,KAAA+K,SAAAI,KAAA,MACAC,QAAA,SAAAC,GACAJ,EAAAK,YAAA,qBAAA,EACA,6BAAA,qBAAAL,EAAAxG,SAEA8G,MAAA,SAAAtC,EAAAoC,GACAG,QAAAC,IAAAJ,EAAAK,cAEAC,YAAAC,MAAA9L,IAAAwB,UAAAE,gBAAA,KAGAyJ,EAAAtB,IAAAnH,KAAA,sBAAAL,KACAyH,WAAAC,UAAA,2BAQAgC,cAAA,WAEA,GAAAZ,GAAAjL,KAGAuC,EAAAzC,IAAAuC,cACArC,KAAA2J,IAAAnH,KAAA,8BAGAxC,MAAA2J,IAAAnH,KAAA,2BAAAL,KACAyH,WAAAC,UAAA,mBAGA7J,KAAA+K,SAAAG,KAAAvG,KAAApC,IACAvC,KAAA+K,SAAAI,KAAA,MACAC,QAAA,SAAAC,GAEAJ,EAAAK,YAAA,8BAAA,EACA,6BAAA,qBACAL,EAAAxG,QAGAwG,EAAAtB,IAAAnH,KAAA,2BAAAL,KACAyH,WAAAC,UAAA,6BAEA0B,MAAA,SAAAtC,EAAAoC,GAEAM,YAAAC,MAAA9L,IAAAwB,UAAAE,gBAAA,KAGAyJ,EAAAtB,IAAAnH,KAAA,2BAAAL,KACAyH,WAAAC,UAAA,gCAcAyB,YAAA,SAAAQ,EAAAC,EAAAC,EAAAC,GACA,GAGA1J,GAAAvC,KAAA2J,IAAAnH,KAAAsJ,GAAA3J,MAGAnC,MAAAwE,SAAAxE,KAAA+K,SAAAmB,IAAA,YAGAH,GACA/L,KAAA2J,IAAAnH,KAAA,uBAAAL,KACAyH,WAAAC,UAAA,gBAAAlF,KAAApC,IAIA,IAKA4J,IALA,GAAAnC,cAAAgC,GACA/B,SAAA,IAIA/H,EAAA+J,GAAAG,SACAC,EAAAnK,EAAA8J,GAAAM,QAGApK,GAAA+J,GAAAM,QAGAvM,KAAAwM,WAAAxM,KAAA+K,SAAAmB,IAAA,cACAlM,KAAA+K,SAAAmB,IAAA,eAAAlM,KAAA+K,SAAAmB,IAAA,eACAD,EAAAI,EAAAF,EAAAnM,KAAAyE,QAGA,OAAA0F,aAAAC,QAAA,gBAEApK,KAAA2J,IAAA8C,OAAA7C,WAAAC,UAAA,qBACA3H,EAAA,sBAAAwK,YAGAvC,aAAAwC,QAAA,cAAA,KAOAH,WAAA,SAAAI,EAAAC,EAAAC,EAAAC,EAAAT,EAAAF,EAAA3H,GA+HA,QAAAuI,KAEAC,EACAC,KAAA,KAAA,SAAAC,GAAA,MAAAA,GAAArG,OAAAsG,IACAF,KAAA,KAAA,SAAAC,GAAA,MAAAA,GAAArG,OAAAuG,IACAH,KAAA,KAAA,SAAAC,GAAA,MAAAA,GAAApG,OAAAqG,IACAF,KAAA,KAAA,SAAAC,GAAA,MAAAA,GAAApG,OAAAsG,IAMAC,EAAAJ,KAAA,YAAA,SAAAC,GACA,GAAAI,GAAAC,KAAAC,IAAA,GAAAD,KAAAE,IAAAvB,EAAAgB,EAAAC,IACAO,EAAAH,KAAAC,IAAA,GAAAD,KAAAE,IAAArB,EAAAc,EAAAE,GAEA,OAAA,aAAAE,EAAA,IAAAI,EAAA,MAIA,QAAAC,GAAAT,GACA3D,GAAAqE,MAAAC,QAAAC,EAAAC,YAAA,IAAAC,UACAd,EAAAe,GAAAf,EAAAC,EACAD,EAAAgB,GAAAhB,EAAAE,EAGA,QAAAe,GAAAjB,GACAA,EAAAe,GAAA1E,GAAAqE,MAAAT,EACAD,EAAAgB,GAAA3E,GAAAqE,MAAAR,EAGA,QAAAgB,GAAAlB,GACA3D,GAAAqE,MAAAC,QAAAC,EAAAC,YAAA,GACAb,EAAAe,GAAA,KACAf,EAAAgB,GAAA,KAGA,QAAAG,KASA,GAAA9H,GAAAgD,GAAA+E,UAAA,QAEA/H,GAAA+H,UAAA,UACAC,MAAA,UAAA,IAGAhI,EAAA+H,UAAA,QACAC,MAAA,UAAA,IACAA,MAAA,cAAA,UAEAhF,GAAA+E,UAAA,UAAAA,UAAA,QACAC,MAAA,SAAA,QAIA,QAAAC,KAEA,GAAAC,GAAAlF,GAAAkF,MAAA1O,MACA2O,EAAAZ,EAAAvL,KAAAkM,EAAA,GAAAA,EAAA,IAKAE,EAAApF,GAAA+E,UAAA,SACAM,OAAA,SAAA1B,GACA,MAAAA,GAAAnL,IAAA2M,EAAA3M,IAGA4M,GAAAE,OAAA,QACAN,MAAA,UAAA,GAEAA,MAAA,cAAA,OAmBAlB,GAAAiB,UAAA,QAGAC,MAAA,UAAA,SAAArB,GAEA,MAAA4B,GAAAJ,EAAAxB,GACA,EAGA,KAQAF,EACAuB,MAAA,SAAA,SAAArB,GACA,MAAAA,GAAArG,OAAA9E,KAAA2M,EAAA3M,IAAAmL,EAAApG,OAAA/E,KAAA2M,EAAA3M,GAAA,UAAA,SA+CA,QAAA+M,GAAAC,EAAAC,GACA,MAAAC,GAAAF,EAAAC,IAAAE,EAAAH,EAAAC,IAAAD,EAAAnI,OAAAoI,EAAApI,MAGA,QAAAsI,GAAAH,EAAAC,GACA,MAAAG,GAAAJ,EAAAnI,MAAA,IAAAoI,EAAApI,OAGA,QAAAqI,GAAAF,EAAAC,GACA,MAAAG,GAAAH,EAAApI,MAAA,IAAAmI,EAAAnI,OAzSA,GAMAG,GAAAlH,IAAAsG,cAAAwG,EAEApB,SAAAC,IAAAzE,EAGA,IAAAqF,GAAAC,EACAH,EAAAC,EAIAiD,GAHAnN,EAAAhC,QAAAoM,UAGAgD,IAAA,EAAAC,MAAA,EAAAC,OAAA,EAAAC,KAAA,IAGAC,EAAAlG,GAAAsF,OAAA/B,GAAAN,OAAA,OACAS,KAAA,QAAAf,EAAAkD,EAAAI,KAAAJ,EAAAE,OACArC,KAAA,SAAAb,EAAAgD,EAAAC,IAAAD,EAAAG,QAUAzB,GAPA2B,EAAAjD,OAAA,QACAS,KAAA,QAAAf,GACAe,KAAA,SAAAb,GACAmC,MAAA,OAAA,QACAA,MAAA,iBAAA,OAGAhF,GAAAmG,kBACAC,MAAA,OAAApG,GAAAqG,YAAA7N,GAAA,SAAAmL,GACA,MAAAA,GAAAnL,MAEA4N,MAAA,SAAApG,GAAAsG,gBAAAC,SAAA,KACAH,MAAA,SAAApG,GAAAwG,YAAA7D,EAAA,EAAAE,EAAA,IACAuD,MAAA,UAAApG,GAAAyG,aAAA,IAAAC,WAAA,MAYAC,EAAAT,EAAAjD,OAAA,KACA2D,GAAA,YAAA3B,GACA2B,GAAA,WAAA9B,GAUArB,EAAAkD,EAAA1D,OAAA,KACAS,KAAA,QAAA,SACAqB,UAAA,QACA8B,KAAArJ,EAAAV,OACAgK,QAAA7D,OAAA,QAIAa,EAAA6C,EAAA1D,OAAA,KACAS,KAAA,QAAA,SACAqB,UAAA,SACA8B,KAAArJ,EAAAR,OACA8J,QAAA7D,OAAA,KACAS,KAAA,QAAA,QACAqD,KAAA/G,GAAAgH,OACAJ,GAAA,QAAAxC,GACAwC,GAAA,OAAAhC,GACAgC,GAAA,MAAA/B,GAsBAf,GAAAb,OAAA,QACAS,KAAA,KAAA,KACAA,KAAA,KAAA,KACAA,KAAA,cAAA,UACAvI,KAAA,SAAAwI,GACA,MAAAA,GAAAnL,IAIA+L,GACAvH,MAAAQ,EAAAR,OACA4J,GAAA,OAAApD,GAGAe,EAAA6B,MAAA,QACAtJ,MAAAU,EAAAV,MAEA,IAAA8I,KACAnC,GAAAvK,KAAA,SAAAyK,GACAiC,EAAAjC,EAAArG,OAAAD,MAAA,IAAAsG,EAAApG,OAAAF,QAAA,OAwNA,KAAA3G,OAAAC,SAAAsQ,UACA,GAAA3Q,KAAAoJ,WCzgBA,IAAApJ,KAAAA,OAEAA,KAAA4Q,UAAAxJ,SAAAiC,KAAA/B,QACAmC,WAAA,WACAiC,QAAAC,IAAA,YAIA,WAAAvL,OAAAC,SAAAsQ,UACA,GAAA3Q,KAAA4Q,SCTA,IAAA5Q,KAAAA,OAEAA,KAAA6Q,cAAAzJ,SAAAiC,KAAA/B,QAEAR,GAAA1E,EAAA,cAEAkH,QACAwH,mBAAA,YAGArH,WAAA,WACA,GAAA0B,GAAAjL,IAGAA,MAAAQ,YAAA,GAAAV,KAAA+I,sBACA7I,KAAAQ,YAAAqQ,OACAzF,QAAA,WACAH,EAAA6F,wBAQAA,kBAAA,WAEA9Q,KAAA2J,IAAAnH,KAAA,gBAAAL,KACAyH,WAAAC,UAAArJ,aAAAE,WACAV,KAAAQ,YAAAuQ,YAGA/Q,KAAA2J,IAAAyG,GAAA,aAAApQ,KAAAgR,SAAAhR,OAOAgR,SAAA,SAAAtQ,GAEA,GAAAuQ,GAAA/O,EAAAxB,EAAAwQ,eAAAhE,KAAA,KAGAhN,QAAAC,SAAAL,IAAAC,KAAAqB,kBAAA6P,KAIA,eAAA/Q,OAAAC,SAAAsQ,UACA,GAAA3Q,KAAA6Q,aXjDA,IAAA7Q,KAAAA,OAEAA,KAAAqR,eAAAjK,SAAAiC,KAAA/B,QAEAR,GAAA1E,EAAA,sBAEAkH,QACAgI,yBAAA,eACAC,4BAAA,cAGA9H,WAAA,WAEAvJ,KAAA4B,cAAA9B,IAAA4B,kBAGA1B,KAAAsR,sBAAA,GAAAxR,KAAAuH,gBAGArH,KAAA+I,eAAA,GAAAjJ,KAAAiJ,eAGA/I,KAAAyH,UAAA,GAAA3H,KAAA2H,SAGA,IAAAwD,GAAAjL,IAGAA,MAAAsR,sBAAAT,OACAzF,QAAA,SAAAC,GACAJ,EAAAsG,gBAEAhG,MAAA,WACAI,YAAAC,MACA,+CAAA,QAKA5L,KAAAwR,cAIAA,WAAA,WACA,GAAAvG,GAAAjL,IAGAA,MAAA+I,eAAA8H,OACAzF,QAAA,SAAAqG,GACAxG,EAAAyG,eAEAnG,MAAA,WACAI,YAAAC,MACA,iDAAA,SAQA2F,aAAA,WAEAvR,KAAAkC,EAAA,MAAAyP,QAAAxP,KAAAnC,KAAAsR,sBAAApF,IAAA,SAGAlM,KAAAkC,EAAA,sBAAAgL,KAAA,OAAApN,IAAAC,KAAAsB,eACArB,KAAAsR,sBAAApF,IAAA,eAOAwF,YAAA,WAEA1R,KAAA2J,IAAAnH,KAAA,UAAAL,KACAyH,WAAAC,UAAA+H,OAAA9Q,KACAd,KAAA+I,eAAAgI,aAMAc,aAAA,WACA,GAAA5G,GAAAjL,IAGAA,MAAAyH,UAAAyD,KAAA4G,SAAA,IAGA9R,KAAAyH,UAAA0D,KAAA,MACAC,QAAA,SAAAnC,EAAAoC,GACAJ,EAAAuG,cAEAjG,MAAA,SAAAtC,EAAAoC,GACAG,QAAAC,IAAAJ,EAAAK,kBAQAqG,WAAA,WACAvG,QAAAC,IAAA,eACAvL,OAAA8R,KAAAlS,IAAAC,KAAAoB,cAAArB,IAAA4B,sBA+FAxB,OAAAC,SAAAsQ,SAAAwB,WAAA,iBACA,GAAAnS,KAAAqR,eY1MArR,IAAAoS,kBAAAhL,SAAAiC,KAAA/B,QAEAR,GAAA1E,EAAA,mBAEAkH,QACA+I,yBAAA,iBACAC,yBAAA,kBAGA7I,WAAA,WACA,GAAA0B,GAAAjL,IAGAA,MAAAqS,YAAA,GAAAvS,KAAA6H,YAGA3H,KAAAqS,YAAAxB,OACAzF,QAAA,SAAAC,GACAJ,EAAAqH,cAEA/G,MAAA,SAAAF,GACAG,QAAAC,IAAA,+CAKAzL,KAAAuS,sBAAA,GAAAzS,KAAAkJ,sBACAhJ,KAAAwS,iBAAA,GAAA1S,KAAA8H,iBAGA5H,KAAAyS,gBAAA,GAAA3S,KAAA+H,iBAGA7H,KAAA0S,SAAA1S,KAAAwS,iBAAA,SAAAxS,KAAA2S,cAKA3S,KAAA4S,cAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,EAAAC,EAAA,IAOAX,WAAA,WAEAtS,KAAA2J,IAAAnH,KAAA,yBAAAL,KACAyH,WAAAC,UAAA,yBACAqJ,MAAAlT,KAAAqS,YAAAtB,YAIA/Q,KAAA2J,IAAAnH,KAAA,UAAA2Q,kBAGAnT,KAAA2J,IAAAnH,KAAA,eAAA4Q,WACAC,cAAA,EACAC,YAAA,GACAC,OAAA,gBAOAZ,aAAA,WAEA3S,KAAAuS,sBAAAiB,IAAAxT,KAAAwS,iBAAAzB,UAGA/Q,KAAAyT,eAMAA,YAAA,WAEAzT,KAAA2J,IAAAnH,KAAA,qBAAAL,KACAyH,WAAAC,UAAA,uBACApJ,YAAAT,KAAAuS,sBAAAxB,aAOA2C,eAAA,WACA,GAAAzI,GAAAjL,KAGAkT,EAAAlT,KAAA2J,IAAAnH,KAAA,eAAAmR,MACAC,EAAA5T,KAAA2J,IAAAnH,KAAA,mBAAAmR,MACAE,EAAA7T,KAAA2J,IAAAnH,KAAA,cAAAmR,KAGA3T,MAAA4S,aAAAM,IAAA,EAGA,KAAAW,EACAlI,YAAAC,MAAA,gCAAA,KAGA5L,KAAAwS,iBAAAtH,KACAxK,WAAA,GAAAoT,YAAAD,EACAE,QAAA9I,EAAA2H,aAAAM,GAAAc,SAAAC,OAAAf,GACAnJ,YAAA,GAAAmJ,MAAAU,KAOAM,eAAA,WACA,GAAAjJ,GAAAjL,KAGAmU,EAAAnU,KAAA2J,IAAAnH,KAAA,oBAAAmR,MAAAjQ,MAGA,IAAA,KAAAyQ,EACAxI,YAAAC,MACA,uDAAA,SAEA,CAEA,GAAA5K,GAAA,GAAAoT,KACAxB,EAAA,GAAAwB,IACApU,MAAAuS,sBAAA7P,KAAA,SAAAuG,GACAjI,EAAAwS,IAAAvK,EAAA8H,SAAA,UACA6B,EAAAY,IAAAvK,EAAA8H,SAAA,WAIA,IAAA6B,EAAAyB,KACA1I,YAAAC,MACA,2CACA,MAIA5L,KAAAyS,gBAAAvH,KACAhI,KAAAiR,EACA5M,gBAAAqL,EAAAyB,KACA7M,UAAAxG,EAAAqT,OAIArU,KAAAyS,gBAAAtH,KAAA,MACAC,QAAA,SAAAnC,EAAAoC,GACAJ,EAAAqJ,oBAGA/I,MAAA,SAAAtC,EAAAoC,GACAG,QAAAC,IAAAJ,SAYAiJ,iBAAA,WACA,GAAArJ,GAAAjL,KAGAuU,EAAAvU,KAAAuS,sBAAA/O,MAGAxD,MAAAuS,sBAAA7P,KAAA,SAAAuG,GAMAA,EAAAhJ,IAAAH,IAAAC,KAAAU,YACAwK,EAAAwH,gBAAAvG,IAAA,aAGAjD,EAAAkC,KAAA,MACAC,QAAA,SAAAnC,EAAAoC,GAEAkJ,GAAA,EAIA,GAAAA,IACArU,OAAAC,SAAAL,IAAAC,KAAAQ,YAIAgL,MAAA,SAAAtC,EAAAoC,GACAG,QAAAC,IAAAJ,EAAAK,sBASA,oBAAAxL,OAAAC,SAAAsQ,UACA,GAAA3Q,KAAAoS,kBC/MApS,IAAA0U,iBAAAtN,SAAAiC,KAAA/B,QAEAR,GAAA1E,EAAA,kBAEAkH,QACAqL,cAAA,UAGAlL,WAAA,aAGAmL,OAAA,WAEA7G,MAAA8G,gBAGA,IAAAC,GAAA5U,KAAA2J,IAAAnH,KAAA,aAAAmR,KAGAkB,cAAAD,EACAxS,QAAA,KAAA,MACAA,QAAA,KAAA,MACAA,QAAA,KAAA,MACAA,QAAA,KAAA,MACAA,QAAA,KAAA,MACAA,QAAA,KAAA,MACAA,QAAA,KAAA,MAAA0S,aAGA,IAAAC,GAAA,yCAGA,IAAA,GAAAH,EAAApR,QAAAuR,EAAAhR,KAAA8Q,cAAA,CAEA,GAAAG,GAAAlV,IAAAmD,UAAA,YAGAf,GAAA+S,MACAC,WAAA,SAAAC,EAAAC,IACAtV,IAAA+D,eAAAuR,EAAAC,OAAAvV,IAAAkE,WAAAoR,EAAAnV,MAIAkV,EAAAG,iBAAA,cAAAN,IAGAK,KAAA,OACApV,IAAAC,OAAAC,SAAAC,KACAiQ,MAAAuE,SAAAC,cACAzJ,QAAA,SAAAC,GAEAnL,OAAAC,SAAAL,IAAAC,KAAAsB,eAAAvB,IAAA4B,mBAGA6J,MAAA,SAAAF,GACAG,QAAAC,IAAAJ,EAAAK,cACAC,YAAAC,MAAAP,EAAAK,aAAA,YAKAC,aAAAC,MAAA,8CAAA,QAMA1L,OAAAC,SAAAsQ,SAAAwB,WAAA,sBACA,GAAAnS,KAAA0U","file":"app.js","sourcesContent":["var app = app || {};\n\n/**\n * Landing View for application\n */\napp.urls = function() {\n    this.url =  window.location.href;\n    var url_split = this.url.split('/');\n\n    this.url = window.location.href;\n    this.split = this.url.split('/');\n    this.website = this.split[0] + '//' + this.split[2];\n    this.dashboard = this.website + \"/dashboard/\";\n\n    // Api endpoints\n    this.experiments = this.website + '/apis/experiments/';\n    this.measurement = this.website + '/apis/measurements/';\n    this.experiment = this.website + '/apis/experiment/';\n    this.user_specific = this.website + '/apis/user-specific/';\n    this.user_experiment = this.website + '/apis/user-experiment/';\n    this.user_specific_name = this.website + '/apis/user-specific-name/';\n    this.user = this.website + '/apis/user-experiment/';\n    this.registration = this.website + '/apis/registration/';\n    this.groups = this.website + '/apis/groups/';\n    this.textanalyzer = this.website + '/apis/textanalyzer/';\n    this.textdata = this.website + '/apis/textdata/';\n    this.csv_text_data = this.website + '/csv_text_export/';\n\n    this.single_experiment = this.website + '/experiment/';\n    this.run_experiment = this.website + '/run-experiment/';\n    \n    return this;\n}();\n\n/**\n * Constants for app\n */\napp.constants = function() {\n    this.editor_textinput = [\"<p>Der Editor zur Analyse der Kohärenz von Texten.</p>\",\n        \"<p>Schreibe hier deinen Text, klicke auf <em>Analyziere Text</em> und lass dir anzeigen, wie kohärent dein Text ist.</p>\"];\n    this.toast_textinput = ['Dein Text konnte nicht verarbeitet werden! \\\n                             Schaue, ob du mindestens zwei Sätze geschrieben hast.'];\n    this.simpleRevisionModal = \"Sie haben nun die Gelegenheit Ihren Text zu überarbeiten. \\\n                                Versuchen Sie potentielle Kohärenzbrüche in Ihrem Text zu \\\n                                schließen und Bezüge zwischen den Konzepten klar darzustellen. \\\n                                Integrieren Sie in Ihrer Überarbeitung auch Konzepte und Verbindungen \\\n                                zwischen Konzepten, die Sie eventuell in Ihrem Entwurf noch nicht \\\n                                bedacht haben.\";\n    return this;\n}();\n\n/**\n * Get id of experiment based on path of url\n * @return {Number} id of experiment\n */\napp.getExperimentId = function() {\n    var path = window.location.href;\n    var experiment_id = path.substr(path.lastIndexOf('/') + 1);\n    \n    return experiment_id;\n};\n\napp.regExText = function(id) {\n    var textToChange = $('#editor-textinput').html();\n    \n    // textToChange = textToChange.replace(/CLT/g, 'Cognitive-Load-Theory');\n    textToChange = textToChange.replace(/[Cc]ognitive [Ll]oad [Tt]heor(y|(ie))/g, 'Cognitive-Load-Theory');\n    // textToChange = textToChange.replace(/[Cc]ognitive [Ll]oad/g, 'Kognitive-Belastung');\n    // textToChange = textToChange.replace(/[Kk]ognitiv[rn]? [Bb]elastung/g, 'Kognitive-Belastung');\n    textToChange = textToChange.replace(/[Ee]xtrinsischer? [Bb]elastung/g, 'Extrinsische-Belastung');\n    textToChange = textToChange.replace(/[Ii]ntrinsischer? [Bb]elastung/g, 'Intrinsische-Belastung');\n    textToChange = textToChange.replace(/[Ll]ernbezogener? [Bb]elastung/g, 'Lernbezogene-Belastung');\n    textToChange = textToChange.replace(/[Ee]xtrinsic [Ll]oad/, 'Extrinsic-Load');\n    textToChange = textToChange.replace(/[Ii]ntrinsic [Ll]oad/g, 'Intrinsic-Load');\n    textToChange = textToChange.replace(/[Gg]ermane [Ll]oad/g, 'Germane-Load');\n    // textToChange = textToChange.replace(/[Aa]rbeitsgedächtnisses/g, 'Arbeitsgedächtnis');\n    textToChange = textToChange.replace(/bzw.?/g, 'beziehungsweise');\n\n    // textToChange = textToChange.replace(/[Ss]ensorischer [Ss]peicher/g, 'Sensorisches-Gedächtnis');\n    // textToChange = textToChange.replace(/[Ss]ensorische[sn]? [Gg]edächtnis/g, 'Sensorisches-Gedächtnis');\n    // textToChange = textToChange.replace(/[Dd]reispeichermodells?/g, 'Drei-Speicher-Modell');\n\n    $(id).html(textToChange);\n};\n\n/**\n * Get text from multiple paragraphs\n * @param {jQuery Object} div div that includes multiple paragraphs\n */\napp.getParagraphs = function(div) {\n    // All paragraphs in text\n    var paragraphs = div.find('p');\n\n    // Api needs a single string. We need to get the text from \n    // the paragraphs\n    var paragraphText = '';\n    paragraphs.each(function(paragraph) {\n        \n        paragraphText += paragraphs[paragraph].innerText + \" \";\n    });\n\n    // Remove line breaks from string\n    paragraphText.replace(/(\\r\\n|\\n|\\r)/gm,\"\");\n\n    // Remove tabs, newlines and too many spaces\n    paragraphText.replace(/\\s\\s+/g, '');\n\n    return paragraphText;\n};\n\n/**\n * Escape all occurences of string\n * @return {String} Replacements\n */\napp.escapeRegExp = function(str) {\n  return str.replace(/[.*+?^${}()|[\\]\\\\]/g, \"\\\\$&\"); // $& means the whole matched string\n};\n\napp.replaceAll = function(str, find, replace) {\n  return str.replace(new RegExp(find, 'g'), replace);\n};\n\n// app.type = function(string,element){\n//     console.log(string);\n//     (function writer(i){\n//         if(string.length <= i++){\n//         element.value = string;\n//         return;\n//     }\n    \n//     element.value = string.substring(0,i);\n    \n//     if( element.value[element.value.length-1] != \" \" )element.focus();\n//         var rand = Math.floor(Math.random() * (100)) + 140;\n//         setTimeout(function(){writer(i);},rand);\n//     })(0);\n// };\n\napp.getCookie = function(name) {\n    var cookieValue = null;\n    if (document.cookie && document.cookie !== '') {\n        var cookies = document.cookie.split(';');\n        for (var i = 0; i < cookies.length; i++) {\n            var cookie = jQuery.trim(cookies[i]);\n            // Does this cookie string begin with the name we want?\n            if (cookie.substring(0, name.length + 1) == (name + '=')) {\n                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\n                 break;\n            }\n        }\n    }\n    return cookieValue;\n};\n\napp.csrfSafeMethod = function(method) {\n    // these HTTP methods do not require CSRF protection\n    return (/^(GET|HEAD|OPTIONS|TRACE)$/.test(method));\n};\n\napp.sameOrigin = function(url) {\n    // test that a given url is a same-origin URL\n    // url could be relative or scheme relative or absolute\n    var host = document.location.host; // host + port\n    var protocol = document.location.protocol;\n    var sr_origin = '//' + host;\n    var origin = protocol + sr_origin;\n    // Allow absolute or scheme relative URLs to same origin\n    return (url == origin || url.slice(0, origin.length + 1) == origin + '/') ||\n        (url == sr_origin || url.slice(0, sr_origin.length + 1) == sr_origin + '/') ||\n        // or any other URL that isn't scheme relative or absolute i.e relative.\n        !(/^(\\/\\/|http:|https:).*/.test(url));\n};\n\n// *\n//  * Highlights each paragraph with the corresponding\n//  * words\n//  * @param  {String}  divId         Id of medium editor\n//  * @param  {Array}   clusters      Array of all clusters\n//  * @param  {Array}   colors        20 distinct colors\n//  * @param  {String}  word          word of cluster that should be highlighted\n//  * @param  {Boolean} singleCluster Wheter a single cluster should be highlighted\n//  * @return {null} \n \napp.highlightWholeText = function(divId, clusters, colors) {\n    $(divId).find('p').each(function(paragraph) {\n        var textParagraph = $(this).text();\n        $(this).html(app.colorText(textParagraph, this, clusters, colors));\n    });\n};\n\n\napp.colorText = function(text, paragraph, clusters, colors) {\n\n    // Save text in variable\n    var newText = text;\n\n    // Get each word in paragraph and remove punctuation from text\n    var words = text.replace(/[.,\\/#!$%\\^&\\*;:{}=_`~()]/g,\"\").split(\" \");\n    \n    // Split whole text string\n    var newTextSplit = newText.replace(/[^\\wöäüÄÖÜß-\\s]|_/g, function ($1) { return ' ' + $1 + ' ';}).replace(/[ ]+/g, ' ').split(' ');\n\n    // Loop over whole text\n    for (var i = 0; i < newTextSplit.length; i++) {\n        var splitWord = newTextSplit[i];\n\n        for (var cluster = 0; cluster < clusters.length; cluster++) {\n            if ($.inArray(splitWord, clusters[cluster]) != -1) {\n                newTextSplit[i] = splitWord.replace(splitWord,\n                    '<a style=\"background-color: ' +\n                    colors(cluster) + ';color: #fff;border-radius: 3px; padding: 1px 3px;\" class=\"cluster' + cluster + '\">' +\n                    splitWord + '</a>');\n            }\n        }\n    }\n\n    return newTextSplit.join(' ');\n};\n\napp.highlightSelectedWord = function(divId, wordSelected, wordsUnselected, lemmaDic, clusters, colors) {\n\n    // Expand unselected words with lemmaDics\n    var updateWordsUnselected = [];\n\n    // Loop over unselected words\n    for (var bah = 0; bah < wordsUnselected.length; bah++) {\n        // Save lemmas of unselected word\n        var dicLemma = lemmaDic[wordsUnselected[bah]];\n\n        // Loop over lemmas\n        for (var lemma = 0; lemma < dicLemma.length; lemma++) {\n            // Append to list\n            updateWordsUnselected.push(dicLemma[lemma]);\n        }\n    }\n\n    // Update unselected words with lemmas\n    wordsUnselected = updateWordsUnselected;\n\n    // Loop over every paragraph\n    $(divId).find('p').each(function(paragraph) {\n        var textParagraph = $(this).text();\n\n        // Get cluster with word\n        var cluster = null;\n        \n        // Get id of cluster the word is in\n        for (var p = 0; p < clusters.length; p++) {\n            if (clusters[p].indexOf(wordSelected) != -1) {\n                cluster = p;\n            }\n        }\n\n        // Save text in variable\n        var newText = textParagraph;\n\n        // Get each word in paragraph and remove punctuation from text\n        var words = textParagraph.replace(/[.,\\/#!$%\\^&\\*;:{}=_`~()]/g,\"\").split(\" \");\n        \n        // Split whole text string\n        var newTextSplit = newText.replace(/[^\\wöäüÄÖÜß-\\s]|_/g, function ($1) { return ' ' + $1 + ' ';}).replace(/[ ]+/g, ' ').split(' ');\n\n        // Used words \n        var usedWords = [];\n        // Loop over every word in paragraph\n        for (var i = 0; i < newTextSplit.length; i++) {\n            // Save current word in paragraph in variable\n            var splitWord = newTextSplit[i];\n\n            // Check if word should be highlighted at all\n            if ($.inArray(splitWord, clusters[cluster]) != -1) {\n                // Loop over every word that applies to the specific lemma\n                for (var j = 0; j < lemmaDic[wordSelected].length; j++) {\n                    var lemmaWord = lemmaDic[wordSelected][j];\n                    // Should word be emphasized\n                    if (splitWord === lemmaWord) {\n                        usedWords.push(lemmaWord);\n\n                        // Highlight word that user currently looks at\n                        newTextSplit[i] = splitWord.replace(splitWord,\n                            '<a style=\"background-color: ' +\n                            colors(cluster) + ';color: #fff;font-weight:bold; font-size: 1.3em; border-radius: 3px; padding: 1px 3px;\" class=\"cluster' + cluster + '\">' +\n                            splitWord + '</a>');\n                    }\n                }\n\n                // Loop over every word that is related to the target word\n                for (var foo = 0; foo < wordsUnselected.length; foo++) {\n                    // Save current word\n                    var unselectedWord = wordsUnselected[foo];\n\n                    // The current word in the paragraph is\n                    // in the same as the related word\n                    if (splitWord === unselectedWord) {\n                        // Tell the usedWords array that we already highlighted\n                        // the current word\n                        usedWords.push(unselectedWord);\n\n                        // Highlight related word of target word in text\n                        newTextSplit[i] = splitWord.replace(splitWord,\n                            '<a style=\"background-color: ' +\n                            colors(cluster) + ';color: #fff; opacity: 0.7; border-radius: 3px; padding: 1px 3px;\" class=\"cluster' + cluster + '\">' +\n                            splitWord + '</a>');\n                    }\n                }\n\n                // if ($.inArray(splitWord, usedWords) == -1) {\n                //     newTextSplit[i] = splitWord.replace(splitWord,\n                //         '<a style=\"background-color: ' +\n                //         colors(cluster) + ';color: #fff; opacity: 0.6; border-radius: 3px; padding: 1px 3px;\" class=\"cluster' + cluster + '\">' +\n                //         splitWord + '</a>');\n                // }\n            }\n        }\n\n        // Return paragraph with highlighting\n        $(this).html(newTextSplit.join(' '));\n    });\n};\n\napp.getLinksNodes = function(wordpairs) {\n    // Variable declaration\n    var links = [];\n    var uniqueLinks = [];\n    var nodes = [];\n    var edges = [];\n\n    // Save all word-pairs in different format\n    wordpairs.forEach(function(pair) {\n        links.push(pair[0]);\n        links.push(pair[1]);\n    });\n\n    // Remove duplicates\n    $.each(links, function(i, el){\n        if($.inArray(el, uniqueLinks) === -1) uniqueLinks.push(el);\n    });\n\n    $.each(uniqueLinks, function(i) {\n        nodes.push({\"index\": i, \"id\": uniqueLinks[i]});\n    });\n    \n\n    // Generate links\n    $.each(wordpairs, function(i) {\n        // Get indexes of texts\n        // var source = uniqueLinks.indexOf(wordpairs[i][0]);\n        // var target = uniqueLinks.indexOf(wordpairs[i][1]);\n        // console.log(wordpairs[i][0]);\n        // Push to edges\n        edges.push({'source': wordpairs[i][0], 'target': wordpairs[i][1]});\n    });\n\n\n    // Save nodes and edges to graph object\n    var graph = {\n        \"nodes\": nodes,\n        \"links\": edges,\n    };\n\n    return graph;\n};\n\n\n/**\n * Renders a simple concept map of forces\n * @param  {Object} pairs       word-pairs of a text\n * @param  {Object} clust       clusters of words\n * @param  {Number} numClusters number of clusters of a text\n * @param  {String} svgID       id of dom element for svg\n * @param  {Number} height      height of svg \n * @param  {Number} width       width of svg\n */\n// app.renderCmap = function(pairs, clust, numClusters, svgID, height, width, colors)  {\n    \n// }","var app = app || {};\n\napp.TextAnalyzerModel = Backbone.Model.extend({\n    url: app.urls.textanalyzer,\n});","var app = app || {};\n\napp.ExperimentView = Backbone.View.extend({\n\n\tel: $('#experiment-single'),\n\n\tevents: {\n\t\t'click #new-user-button': 'generateUser',\n\t\t'click #data-export-button': 'dataExport',\n\t},\n\n\tinitialize: function() {\n\t\t// Get id of experiment\n\t\tthis.experiment_id = app.getExperimentId();\n\n\t\t// Init experiment model\n\t\tthis.singleExperimentModel = new app.ExperimentModel();\n\n\t\t// Init user collection\n\t\tthis.UserCollection = new app.UserCollection();\n\n\t\t// Init single user model\n\t\tthis.UserModel = new app.UserModel();\n\n\t\t// Assign self to this\n\t\tvar self = this;\n\n\t\t// Fetch experiment data\n\t\tthis.singleExperimentModel.fetch({\n\t\t\tsuccess: function(response) {\n\t\t\t\tself.renderHeader();\n\t\t\t},\n\t\t\terror: function() {\n\t\t\t\tMaterialize.toast(\n\t\t\t\t\t'Das Experiment konnte nicht gefunden werden!', 4000);\n\t\t\t}\n\t\t});\n\n\t\t// Fetch users\n\t\tthis.fetchUsers();\n\n\t},\n\n\tfetchUsers: function() {\n\t\tvar self = this;\n\n\t\t// Get user collection\n\t\tthis.UserCollection.fetch({\n\t\t\tsuccess: function(collection) {\n\t\t\t\tself.renderUsers();\n\t\t\t},\n\t\t\terror: function() {\n\t\t\t\tMaterialize.toast(\n\t\t\t\t\t'Die Nutzerdaten konnten nicht gefunden werden!', 4000);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Set the html of the header to the experiment name\n\t */\n\trenderHeader: function() {\n\t\t// Assign experiment name to heading\n\t\tthis.$('h1').first().html(this.singleExperimentModel.get('name'));\n\n\t\t// Set href for experiment to heading\n\t\tthis.$(\"#experiment-header\").attr(\"href\", app.urls.run_experiment +\n\t\t\tthis.singleExperimentModel.get('master_pw'));\n\n\t},\n\n\t/**\n\t * Render data for each user of the experiment\n\t */\n\trenderUsers: function() {\n\t\t// Render users\n\t\tthis.$el.find('#users').html(\n\t\t\tHandlebars.templates.users({user:\n\t\t\t\tthis.UserCollection.toJSON()}));\n\t},\n\n\t/**\n\t * Generates new users\n\t */\n\tgenerateUser: function() {\n\t\tvar self = this;\n\n\t\t// Generate new user\n\t\tthis.UserModel.set({'nr_users': 1});\n\n\t\t// Save new User \n\t\tthis.UserModel.save(null, {\n\t\t\tsuccess: function (model, response) {\n\t\t\t\tself.fetchUsers();\n\t\t\t},\n\t\t\terror: function (model, response) {\n\t\t\t\tconsole.log(response.responseText);\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Export data as csv\n\t */\n\tdataExport: function() {\n\t\tconsole.log('export data');\n\t\twindow.open(app.urls.csv_text_data + app.getExperimentId());\n\t}\n\n});\n\n\n// // ==================== SwitchButtonView =====================\n// var GenerateUserView = Backbone.View.extend({\n// \tel: $('#experiment_generate-user'),\n\n// \tevents: {\n// \t\t\"click #experiment_generate-user-button\": \"generateUser\",\n// \t\t\"mouseup #experiment_slider\": \"setSliderValue\",\n// \t},\n\n// \tuser_template: _.template($('#experiment_show-users-template').html()),\n\n// \tinitialize: function() {\n\n// \t\tthis.user_collection = new UserCollection();\n\t\t\n// \t\tthis.user_collection.bind('sync', this.fetchUsers());\n// \t\tthis.slider_value_paragraph = $('#experiment_slider-value')\n\n// \t\tvar self = this;\n\n// \t\tthis.user_collection.fetch({\n// \t\t\tsuccess: function(collection) {\n// \t\t\t\tif (collection.length > 0) {\n// \t\t\t\t\tself.renderUsers()\n// \t\t\t\t}\n// \t\t\t}\n// \t\t})\n// \t},\n\n// \tsetSliderValue: function() {\n\t\t\n// \t\tvar slider = $('#experiment_slider').attr('aria-valuenow');\n\n// \t\tthis.slider_value_paragraph.html(slider);\n// \t},\n\n// \tgenerateUser: function() {\n// \t\tvar user_model = new UserModel();\n// \t\tvar self = this;\n\n// \t\tvar nr_users = $('#experiment_slider-value').html();\n// \t\tuser_model.set({'nr_users': nr_users});\n\n// \t\t// Save experiment model\n// \t\tuser_model.save(null, {\n// \t\t    success: function (model, response) {\n// \t\t    \t// Save measurement data for experiment\n\n// \t\t        // Empty experiment model\n// \t\t        user_model.clear();\n\n// \t\t        // Render user data\n// \t\t        self.fetchUsers();\n// \t\t    },\n// \t\t    error: function (model, response) {\n// \t\t        console.log(response.responseText);\n// \t\t    }\n// \t\t});\n\n// \t},\n\n// \tfetchUsers: function() {\n\t\t\n// \t\tvar self = this;\n\t\t\n// \t\t// Fetch users from database\n// \t\tthis.user_collection.fetch({\n// \t\t\tsuccess: function(collection) {\n// \t\t\t\tif (collection.length > 0) {\n// \t\t\t\t\tself.renderUsers();\n// \t\t\t\t\t// self.renderBarChart();\n// \t\t\t\t}\n// \t\t\t}\n// \t\t});\n// \t},\n\n// \trenderUsers: function() {\n\t\t\n// \t\tvar user_div = $('#experiment_show-users');\n\t\t\n// \t\t// Empty user div\n// \t\tuser_div.empty();\n\n// \t\tuser_div.html(this.user_template({users: this.user_collection.toJSON()}));\n// \t},\n\n// });\n\n\nif (window.location.pathname.startsWith('/experiment/')) {\n\tnew app.ExperimentView();\n}\n// var experiment_view = new ExperimentView();\n// var user_view = new GenerateUserView();\n","var app = app || {};\n\napp.UserModel = Backbone.Model.extend({\n    url: app.urls.user_experiment  + app.getExperimentId(),\n});","var app = app || {};\n\napp.UserSpecificModel = Backbone.Model.extend({\n    url: app.urls.user_specific  + app.getExperimentId(),\n});","var app = app || {};\n\napp.GroupsModel = Backbone.Model.extend({\n    url: app.urls.groups\n});","var app = app || {};\n\napp.MeasurementCollection = Backbone.Collection.extend({\n    model: app.MeasurementModel\n});","var app = app || {};\n\napp.ExperimentsModel = Backbone.Model.extend({\n\turl: app.urls.experiments\n});","var app = app || {};\n\napp.TextModelComplete = Backbone.Model.extend({\n\turl: app.urls.textdata + app.getExperimentId(),\n\n    defaults: {\n        \"pre_text\": null,\n        \"post_text\": null,\n        \"pre_num_sentences\": null,\n        \"post_num_sentences\": null,\n        \"pre_num_clusters\": null,\n        \"post_num_clusters\": null,\n        \"pre_num_coherent_sentences\": null,\n        \"post_num_coherent_sentences\": null,\n        \"pre_num_non_coherent_sentences\": null,\n        \"post_num_non_coherent_sentences\": null,\n        \"pre_page_duration\": null,\n        \"post_page_duration\": null,\n        \"pre_num_concepts\": null,\n        \"post_num_concepts\": null\n    }\n});","var app = app || {};\n\napp.ExperimentsCollection = Backbone.Collection.extend({\n\turl: app.urls.experiments\n});","var app = app || {};\n\napp.UserCollection = Backbone.Model.extend({\n    url: app.urls.user_experiment + '/' + app.getExperimentId(),\n});","var app = app || {};\n\napp.LandingView = Backbone.View.extend({\n\n  el: $('#landingview'),\n\n  events: {\n    'click #editor-button': 'analyzeText',\n    'click #editor-full-button': 'reanalyzeText'\n  },\n\n  initialize: function () {\n    // Assign self to this\n    var self = this;\n\n    // Generate 20 distinct colors\n    this.colors = d3.scaleOrdinal(d3.schemeCategory10);\n\n    // Render editor\n    this.$el.find('#landingview-editor').html(\n      Handlebars.templates.editor({'instruction': \"\"}));\n\n    // Enable editor functionality\n    var editor = new MediumEditor('#editor-textinput', {\n      toolbar: false,\n      placeholder: false,\n    });\n\n    // Check if user first visits the page\n    if (localStorage.getItem('firstVisit') === null) {\n      // Start type animation\n      $('#editor-textinput').typed({\n        strings: app.constants.editor_textinput,\n        typeSpeed: 2,\n        contentType: 'html',\n        cursorChar: \"\",\n        callback: function() {\n          // Select text in medium editor\n          var editableElement = document.\n            querySelector('#editor-textinput').firstChild;\n          editor.selectElement(editableElement);\n        }\n      });\n    // User has already visited the site\n    } else {\n      $('#editor-textinput').html('<p>Schreibe hier ...</p>');\n\n      // Select text so that user can type instantly\n      var editableElement = document.\n        querySelector('#editor-textinput').firstChild;\n      editor.selectElement(editableElement);\n    }\n\n    // Initalize model for text analysis\n    this.analyzer = new app.TextAnalyzerModel();\n  },\n\n  /**\n   * Get text from medium editor and pass it to render function\n   */\n  analyzeText: function() {\n    // Assign self to this\n    var self = this;\n\n    // Get text from medium editor\n    var paragraphs = app.getParagraphs(this.$el.find('#editor-textinput'));\n\n    // Render loading ring\n    this.$el.find('#editor-button-div').html(\n      Handlebars.templates['loading-ring']());\n\n    // Fetch data from server\n    this.analyzer.set({'text': paragraphs});\n    this.analyzer.save(null, {\n      success: function(response) {\n        self.renderGraph('#editor-textinput', true,\n          '#editor-full-medium-editor', '#editor-full-graph', self.colors);\n      },\n      error: function(model, response) {\n        console.log(response.responseText);\n        // Send error message as toast\n        Materialize.toast(app.constants.toast_textinput, 4000);\n\n        // Rerender analyze button\n        self.$el.find('#editor-button-div').html(\n          Handlebars.templates['text_analyze_button']());\n      }\n    });\n  },\n\n  /**\n   * Analye Text when user has already submitted first draft\n   */\n  reanalyzeText: function() {\n\n    var self = this;\n\n    // Get text from medium editor\n    var paragraphs = app.getParagraphs(\n      this.$el.find('#editor-full-medium-editor'));\n\n    // Render loading ring\n    this.$el.find('#editor-full-button-div').html(\n      Handlebars.templates['loading-ring']());\n\n    // Fetch data from server\n    this.analyzer.set({'text': paragraphs});\n    this.analyzer.save(null, {\n      success: function(response) {\n        // Render graph\n        self.renderGraph('#editor-full-medium-editor', false,\n          '#editor-full-medium-editor', '#editor-full-graph',\n          self.colors);\n\n        // Rerender analyze button\n        self.$el.find('#editor-full-button-div').html(\n          Handlebars.templates['text_analyze_button_full']());\n      },\n      error: function(model, response) {\n        // Send error message as toast\n        Materialize.toast(app.constants.toast_textinput, 4000);\n\n        // Rerender analyze button\n        self.$el.find('#editor-full-button-div').html(\n          Handlebars.templates['text_analyze_button_full']());\n\n      }\n    });\n  },\n\n  /**\n   * Render graph\n   * @param  {String}  paragraphDiv the div that contains the paragraphs\n   * @param  {Boolean} full         wheather editor full template should be loaded\n   * @param  {String}  mediumEditor div of medium editor in ordre to enable typing\n   * @param  {String}  graphDiv     div where svg is rendered\n   * @return {None}\n   */\n  renderGraph: function(paragraphDiv, full, mediumEditor, graphDiv) {\n    var self = this;\n\n    // Get paragraphs from editor\n    var paragraphs = this.$el.find(paragraphDiv).html();\n\n    // Save clusters in Backbone View scope\n    this.clusters = this.analyzer.get('clusters');\n\n    // Add template\n    if (full) {\n      this.$el.find('#landingview-editor').html(\n        Handlebars.templates['editor-full']({'text': paragraphs}));\n    }\n\n    // Enable editor functionality\n    var editor = new MediumEditor(mediumEditor, {\n      toolbar: false,\n    });\n\n    // Render Graph\n    var svgWidth = $(graphDiv).width();\n    var svgHeight = $(mediumEditor).height();\n\n    // Empty div with svg element\n    $(graphDiv).empty();\n\n    // Render graph\n    this.renderCmap(this.analyzer.get('word_pairs'),\n      this.analyzer.get('numConcepts'), this.analyzer.get('numClusters'),\n      graphDiv, svgHeight, svgWidth, this.colors);\n\n    // Check if user first visits the page\n    if (localStorage.getItem('firstVisit') === null) {\n      // Trigger modal\n      this.$el.append(Handlebars.templates['modal_instruction']());\n      $('#modal-instruction').openModal();\n\n      // Set local storage\n      localStorage.setItem('firstVisit', false);\n    }\n\n    // Loop over every paragraph\n    // app.highlightWholeText('#editor-full-medium-editor', this.clusters, this.colors);\n  },\n\n  renderCmap: function(pairs, numConcepts, numClusters, svgID, height, width, colors)  {\n    var self = this;\n\n    // ****************** Render SVG ***************************************\n    // Variable declaration\n    // var clusters = clust;\n    // var lemmaDic = this.analyzer.get('lemmaDic');\n    var graph = app.getLinksNodes(pairs);\n\n    console.log(graph);\n\n    // // Adjust height of svg\n    var svgHeight = height;\n    var svgWidth = width;\n    var windowHeight = $(window).height();\n\n    // Set margin and width\n    var margin = {top: 0, right: 0, bottom: 0, left: 0};\n\n    // Select svg\n    var svg = d3.select(svgID).append(\"svg\")\n      .attr(\"width\", svgWidth + margin.left + margin.right)\n      .attr(\"height\", svgHeight + margin.top + margin.bottom);\n\n    // Append rectangle to svg\n    var rect = svg.append(\"rect\")\n      .attr(\"width\", svgWidth)\n      .attr(\"height\", svgHeight)\n      .style(\"fill\", \"none\")\n      .style(\"pointer-events\", \"all\");\n\n    // Create new force simulation\n    var simulation = d3.forceSimulation()\n      .force('link', d3.forceLink().id(function(d) {\n        return d.id;\n      }))\n      .force('charge', d3.forceManyBody().strength(80))\n      .force('center', d3.forceCenter(svgWidth / 2, svgHeight / 2))\n      .force('collide', d3.forceCollide(40).iterations(60));\n\n    ///////////////////////////////\n    // Enable zoom functionality //\n    ///////////////////////////////\n\n    // Call zoom\n    // svg.call(d3.zoom()\n    //   .scaleExtent([1 / 10, 10])\n    //   .on('zoom', zoomed));\n\n    // Wrap everything in g element\n    var g = svg.append('g')\n      .on('mouseover', mouseover)\n      .on('mouseout', mouseout);\n\n    /**\n     * Zoom function\n     */\n    // function zoomed() {\n    //   g.attr('transform', d3.event.transform);\n    // }\n\n    // Add links\n    var link = g.append('g')\n      .attr('class', 'links')\n      .selectAll('line')\n      .data(graph.links)\n      .enter().append('line');\n\n    // Create g element that stores\n    // circles and text and call dragging on it\n    var node = g.append('g')\n      .attr('class', 'nodes')\n      .selectAll('.node')\n      .data(graph.nodes)\n      .enter().append('g')\n      .attr('class', 'node')\n      .call(d3.drag()\n        .on('start', dragstarted)\n        .on('drag', dragged)\n        .on('end', dragended));\n\n    // Append cirles to node\n    // var circles = node.append('circle')\n    //   // .attr('class', 'nodes')\n    //   .attr('r', 15)\n    //   .attr('cx', 0)\n    //   .attr('cy', 0)\n    //   // .attr('ry', 2)\n    //   // .style(\"fill\", function (word) {\n    //   //  // Loop over every cluster\n    //   //  for (var i = 0; i < clusters.length; i++) {\n    //   //    // Check if current word is in current Array\n    //   //    if ($.inArray(word.id, clusters[i]) != -1) {\n    //   //      // Return color if word war found in array\n    //   //      return colors(i);\n    //   //    }\n    //   //  }\n    //   // })\n    //   .style('opacity', 0.6);\n\n    // Append label to node container\n    var label = node.append('text')\n      .attr('dy', '0')\n      .attr('dx', '0')\n      .attr('text-anchor', 'middle')\n      .text(function(d) {\n        return d.id;\n      });\n\n    // Add nodes to simulation\n    simulation\n      .nodes(graph.nodes)\n      .on('tick', ticked);\n\n    // Add links to simulation\n    simulation.force('link')\n      .links(graph.links);\n\n    var linkedByIndex = {};\n      link.each(function(d) {\n        linkedByIndex[d.source.index + \",\" + d.target.index] = true;\n      });\n\n    /**\n     * Tick function adds x and y\n     * coordinates to nodes and links\n     */\n    function ticked() {\n      // Update links\n      link\n        .attr('x1', function(d) { return d.source.x; })\n        .attr('y1', function(d) { return d.source.y; })\n        .attr('x2', function(d) { return d.target.x; })\n        .attr('y2', function(d) { return d.target.y; });\n\n      // var xTest = Math.max(6, Math.min(svgWidth, d.x));\n      // var yTest = Math.max(6, Math.min(svgHeight, d.y));\n\n      // Update nodes\n      node.attr('transform', function(d) {\n        var xTest = Math.max(25, Math.min(svgWidth, d.x));\n        var yTest = Math.max(25, Math.min(svgHeight, d.y));\n\n        return 'translate(' + xTest + ',' + yTest + ')';\n      });\n    }\n\n    function dragstarted(d) {\n      if (!d3.event.active) simulation.alphaTarget(0.3).restart();\n      d.fx = d.x;\n      d.fy = d.y;\n    }\n\n    function dragged(d) {\n      d.fx = d3.event.x;\n      d.fy = d3.event.y;\n    }\n\n    function dragended(d) {\n      if (!d3.event.active) simulation.alphaTarget(0);\n      d.fx = null;\n      d.fy = null;\n    }\n\n    function mouseout() {\n      // $('#editor-full-medium-editor').find('p').each(function(paragraph) {\n      //  var textParagraph = $(this).text();\n      //  // console.log(textParagraph);\n\n      //  $(this).html(textParagraph);\n      // });\n\n      // // Get all nodes\n      var nodes = d3.selectAll('.node');\n\n      nodes.selectAll('circle')\n        .style('opacity', 0.6);\n        // .attr('r', 15);\n\n      nodes.selectAll('text')\n       .style('opacity', 0.6)\n       .style('font-weight', 'normal');\n\n      d3.selectAll('.links').selectAll('line')\n       .style('stroke', '#ccc');\n\n    }\n\n    function mouseover() {\n      // Get data\n      var mouse = d3.mouse(this);\n      var obj = simulation.find(mouse[0], mouse[1]);\n\n      //////////////////////\n      // Selected element //\n      //////////////////////\n      var nodeSelected = d3.selectAll('.node')\n        .filter(function(d) {\n          return d.id == obj.id;\n        });\n\n      var textSelected = nodeSelected.select('text')\n       .style('opacity', 1)\n       // .style('font-size', 20)\n       .style('font-weight', 'bold');\n\n      // nodeSelected.select('circle')\n      //  .attr('r', 25);\n\n      //////////////////////////////\n      // Highlight adjacent nodes //\n      //////////////////////////////\n      // node.selectAll('circle')\n      //   // .transition()\n      //   // .duration(20)\n      //   .style('opacity', function(d) {\n      //     if (isConnected(obj, d)) {\n      //       return 1;\n      //     }\n\n      //     return 0.6;\n      //   });\n\n      node.selectAll('text')\n       // .transition()\n       // .duration(20)\n       .style('opacity', function(d) {\n\n         if (isConnected(obj, d)) {\n           return 1;\n         }\n\n         return 0.6;\n\n       });\n       // .style('font-weight', 'bold');\n\n      /////////////////////\n      // Highlight links //\n      /////////////////////\n      link\n        .style('stroke', function(d) {\n          return d.source.id === obj.id || d.target.id === obj.id ? '#4c4c4c' : '#ccc';\n        });\n\n\n      ////////////////////////\n      // Unselected element //\n      ////////////////////////\n      // var nodeUnselected = d3.selectAll('.node')\n      //  .filter(function(d) {\n      //    return d.id != obj.id;\n      //  });\n\n      // nodeUnselected.select('text')\n      //  .style('font-size', 16)\n      //  .style('font-weight', 'normal');\n\n      // nodeUnselected.select('circle')\n      //  .attr('r', 15);\n\n      /////////////////////////////\n      // Highlight words in text //\n      /////////////////////////////\n\n      // We need to get the text of the selected word in order\n      // to highlight them\n      // var wordSelected = textSelected.text();\n\n      // // Get all words that are semantically related\n      // // to the selected word\n      // var wordsUnselected = [];\n      // node.selectAll('text')\n      //  .each(function(d) {\n      //    if (isConnected(obj, d)) {\n      //      wordsUnselected.push(d.id);\n      //    }\n      //  });\n\n      // Remove selected word\n      // var index = wordsUnselected.indexOf(wordSelected);\n\n      // Update unselected words without selected word\n      // wordsUnselected.splice(index, 1);\n\n      // app.highlightSelectedWord('#editor-full-medium-editor', wordSelected, wordsUnselected, lemmaDic, clusters,\n      //  self.colors);\n    }\n\n    function isConnected(a, b) {\n      return isConnectedAsTarget(a, b) || isConnectedAsSource(a, b) || a.index == b.index;\n    }\n\n    function isConnectedAsSource(a, b) {\n      return linkedByIndex[a.index + \",\" + b.index];\n    }\n\n    function isConnectedAsTarget(a, b) {\n      return linkedByIndex[b.index + \",\" + a.index];\n    }\n  }\n\n  // printSVG: function() {\n  //  /*\n  //   * Prints SVG as pdf\n  //   * borrowed from http://stackoverflow.com/questions/21660843/print-only-svg-from-browser\n  //   */\n\n  //  var popUpAndPrint = function() {\n  //    var container = $('#openapp_svg');\n  //    var mySVG = container.find('svg');\n  //    var width = mySVG.width();\n  //    var height = mySVG.height();\n\n  //    // Open new window\n  //    var printWindow = window.open('', 'SVG',\n  //    'width=' + width + ',height=' + height);\n\n  //    // Open and close HTML output stream\n  //    printWindow.document.writeln('<link rel=\"stylesheet\" href=\"/static/cohapp/css/custom.css\" type=\"text/css\">');\n  //    printWindow.document.writeln($(container).html());\n  //    printWindow.document.close();\n\n  //    // Wait until pop up window is loaded\n  //    // http://stackoverflow.com/questions/15890448/java-script-printing-out-a-blank-page\n  //    $(printWindow).on('load', function() {\n  //      printWindow.print();\n  //      printWindow.close();\n  //    });\n  //  };\n\n  //  setTimeout(popUpAndPrint, 500);\n  // }\n\n});\n\nif (window.location.pathname == '/') {\n  new app.LandingView();\n}\n","var app = app || {};\n\napp.LoginView = Backbone.View.extend({\n    initialize: function() {\n        console.log('login');\n    }\n});\n\nif (window.location.pathname == '/login/') {\n    new app.LoginView();\n}","var app = app || {};\n\napp.DashboardView = Backbone.View.extend({\n\n\tel: $('#dashboard'),\n\n\tevents: {\n\t\t'click .table-row': 'redirect'\n\t},\n\n\tinitialize: function() {\n\t\tvar self = this;\n\n\t\t// Fetch experiments\n\t\tthis.experiments = new app.ExperimentsCollection();\n\t\tthis.experiments.fetch({\n\t\t\tsuccess: function() {\n\t\t\t\tself.renderExperiments();\n\t\t\t}\n\t\t});\n\t},\n\n\t/**\n\t * Render all experiments for specific user\n\t */\n\trenderExperiments: function() {\n\t\t// Render table with experiments\n\t\tthis.$el.find('#experiments').html(\n\t\t\tHandlebars.templates.experiments({experiment:\n\t\t\t\tthis.experiments.toJSON()}));\n\n\t\t// Attach event listener\n\t\tthis.$el.on(\".table-row\", this.redirect, this);\n\n\t},\n\n\t/**\n\t * Redirect to experiment that user clicks on\n\t */\n\tredirect: function(experiment) {\n\t\t// Get ID of current experiment\n\t\tvar idExperiment = $(experiment.currentTarget).attr('id');\n\t\t\n\t\t// Redirect to experiment\n\t\twindow.location = app.urls.single_experiment + idExperiment;\n\t}\n});\n\nif (window.location.pathname == '/dashboard/') {\n\tnew app.DashboardView();\n}\n","app.NewExperimentView = Backbone.View.extend({\n\n\tel: $('#new-experiment'),\n\n\tevents: {\n\t\t'click #add-measurement': 'addMeasurement',\n\t\t'click #save-experiment': 'saveExperiment'\n\t},\n\n\tinitialize: function() {\n\t\tvar self = this;\n\n\t\t// Get groups\n\t\tthis.groupsModel = new app.GroupsModel();\n\t\t\n\t\t// Get data from groups model\n\t\tthis.groupsModel.fetch({\n\t\t\tsuccess: function(response) {\n\t\t\t\tself.renderForm();\n\t\t\t},\n\t\t\terror: function(response) {\n\t\t\t\tconsole.log(\"Die Gruppen konnten nicht geladen werden\");\n\t\t\t}\n\t\t});\n\n\t\t// Init MeasurementCollection\n\t\tthis.measurementCollection = new app.MeasurementCollection();\n\t\tthis.measurementModel = new app.MeasurementModel();\n\n\t\t// Init experiment model\n\t\tthis.experimentModel = new app.ExperimentsModel();\n\n\t\t// Listen for model changes\n\t\tthis.listenTo(this.measurementModel, 'change', this.modelChanged);\n\n\t\t// Measurement tracker\n\t\t// Whenever a new measurement is added I\n\t\t// increment the counter of each group\n\t\tthis.measurements = {1: 0, 2: 0, 3: 0, 4: 0, 5: 0};\n\n\t},\n\n\t/**\n\t * Render the form in order to create experiment\n\t */\n\trenderForm: function() {\n\t\t// Render initial table\n\t\tthis.$el.find('#experiment-generator').html(\n\t\t\tHandlebars.templates['experiment-generator']({\n\t\t\t\tgroup: this.groupsModel.toJSON()\n\t\t\t}));\n\n\t\t// Enable select option\n\t\tthis.$el.find('select').material_select();\n\n\t\t// Enable date picker\n\t\tthis.$el.find('.datepicker').pickadate({\n\t\t\tselectMonths: true, // Creates a dropdown to control month\n\t\t\tselectYears: 15, // Creates a dropdown of 15 years to control year\n\t\t\tformat: 'yyyy-mm-dd'\n\t\t});\n\t},\n\n\t/**\n\t * Listen for changes in the measurement model\n\t */\n\tmodelChanged: function() {\n\t\t// Add model to collection\n\t\tthis.measurementCollection.add(this.measurementModel.toJSON());\n\n\t\t// Render table\n\t\tthis.renderTable();\n\t},\n\n\t/**\n\t * Render table with measurements\n\t */\n\trenderTable: function() {\n\t\t// Render Table of experiment\n\t\tthis.$el.find('#experiment-table').html(\n\t\t\tHandlebars.templates['measurements-table']({\n\t\t\t\tmeasurement: this.measurementCollection.toJSON()\n\t\t}));\n\t},\n\n\t/**\n\t * Add a single measurement and render measurement table\n\t */\n\taddMeasurement: function() {\n\t\tvar self = this;\n\n\t\t// Get form values\n\t\tvar group = this.$el.find('#form-group').val();\n\t\tvar treatment = this.$el.find('#form-treatment').val();\n\t\tvar date = this.$el.find('#form-date').val();\n\n\t\t// Increment number of measurements for group\n\t\tthis.measurements[group] += 1;\n\n\t\t// Check if user included a date\n\t\tif (date === '') {\n\t\t\tMaterialize.toast('Bitte füge noch ein Datum ein', 4000);\n\t\t} else {\n\t\t\t// Save data to measurement model\n\t\t\tthis.measurementModel.set({\n\t\t\t\texperiment: \"\", publication: date,\n\t\t\t\tmeasure: self.measurements[group], nr_group: Number(group),\n\t\t\t\tinstruction: \"\", group: treatment});\n\t\t}\n\t},\n\n\t/**\n\t * Save experiment\n\t */\n\tsaveExperiment: function() {\n\t\tvar self = this;\n\n\t\t// Name of experiment\n\t\tvar experimentName = this.$el.find('#experiment-name').val().trim();\n\n\t\t// Check if user has included a name for the experiment\n\t\tif (experimentName === '') {\n\t\t\tMaterialize.toast(\n\t\t\t\t'Bitte tragen Sie noch den Namen des Experiements ein', 4000);\n\t\t// User has included a name for the experiment\n\t\t} else {\n\t\t\t// Count number of measurements and nr of groups\n\t\t\tvar groups = new Set();\n\t\t\tvar measurements = new Set();\n\t\t\tthis.measurementCollection.each(function(model) {\n\t\t\t\tgroups.add(model.toJSON()['nr_group']);\n\t\t\t\tmeasurements.add(model.toJSON()['measure']);\n\t\t\t});\n\n\t\t\t// User has not included any measurements\n\t\t\tif (measurements.size === 0) {\n\t\t\t\tMaterialize.toast(\n\t\t\t\t\t'Bitte fügen Sie noch Messzeitpunkte ein.',\n\t\t\t\t\t4000);\n\t\t\t// User has included measurements\n\t\t\t} else {\n\t\t\t\t// Save experiment\n\t\t\t\tthis.experimentModel.set({\n\t\t\t\t\tname: experimentName,\n\t\t\t\t\tnr_measurements: measurements.size,\n\t\t\t\t\tnr_groups: groups.size\n\t\t\t\t});\n\n\t\t\t\t// Post data to server\n\t\t\t\tthis.experimentModel.save(null, {\n\t\t\t\t\tsuccess: function(model, response) {\n\t\t\t\t\t\tself.saveMeasurements();\n\t\t\t\t\t},\n\n\t\t\t\t\terror: function(model, response) {\n\t\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\n\t\t}\n\t},\n\n\t/**\n\t * Save measurements\n\t */\n\tsaveMeasurements: function() {\n\t\tvar self = this;\n\n\t\t// Get length of collection\n\t\tvar lengthCollection = this.measurementCollection.length;\n\n\t\t// Loop over every model in collection\n\t\tthis.measurementCollection.each(function(model) {\n\t\t\t\n\t\t\t// Recreate url for measurementmodel\n\t\t\t// The url in the model is not complete\n\t\t\t// we have to include the master password\n\t\t\t// for the specific experiment\n\t\t\tmodel.url = app.urls.measurement +\n\t\t\t\tself.experimentModel.get('master_pw');\n\n\t\t\t// Save measurement instance\n\t\t\tmodel.save(null, {\n\t\t\t\tsuccess: function(model, response) {\n\t\t\t\t\t// Decrement remainding models\n\t\t\t\t\tlengthCollection -= 1;\n\n\t\t\t\t\t// If last model has been reached,\n\t\t\t\t\t// redirect to dashboard\n\t\t\t\t\tif (lengthCollection == 0) {\n\t\t\t\t\t\twindow.location = app.urls.dashboard;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\terror: function(model, response) {\n\t\t\t\t\tconsole.log(response.responseText);\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\n\t}\n});\n\nif (window.location.pathname == '/new-experiment/') {\n    new app.NewExperimentView();\n}\n","app.SubjectLoginView = Backbone.View.extend({\n\n\tel: $('#subject-login'),\n\n\tevents: {\n\t\t\"submit form\": \"submit\",\n\t},\n\n\tinitialize: function() {\n\t},\n\n\tsubmit: function() {\n\t\t// Prevent default behavior\n\t\tevent.preventDefault();\n\n\t\t// Get input \n\t\tvar username = this.$el.find('#username').val();\n\n\t\t// Remove vocal mutations and lowercase username\n\t\ttidyUsername = username\n\t\t\t.replace(/ä/g,\"ae\")\n\t\t\t.replace(/ö/g,\"oe\")\n\t\t\t.replace(/ü/g,\"ue\")\n\t\t\t.replace(/Ä/g,\"ae\")\n\t\t\t.replace(/Ö/g,\"oe\")\n\t\t\t.replace(/Ü/g,\"ue\")\n\t\t\t.replace(/ß/g,\"ss\").toLowerCase();\n\n\t\t// Check if string is valid\n\t\tvar regex = /^([a-z]{2,4}(0[1-9]|1[012])[a-z]{2,4})$/;\n\n\t\t// Check if username is valid\n\t\tif (username.length == 6 && regex.test(tidyUsername)) {\n\t\t\t// Get csrftoken\n\t\t\tvar csrftoken = app.getCookie('csrftoken');\n\n\t\t\t// Send post request\n\t\t\t$.ajax({\n\t\t\t\tbeforeSend: function(xhr, settings) {\n\t\t\t\t\tif (!app.csrfSafeMethod(settings.type) && app.sameOrigin(settings.url)) {\n\t\t\t\t\t\t// Send the token to same-origin, relative URLs only.\n\t\t\t\t\t\t// Send the token only if the method warrants CSRF protection\n\t\t\t\t\t\t// Using the CSRFToken value acquired earlier\n\t\t\t\t\t\txhr.setRequestHeader(\"X-CSRFToken\", csrftoken);\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\ttype: \"POST\",\n\t\t\t\turl: window.location.href,\n\t\t\t\tdata: {username: tidyUsername},\n\t\t\t\tsuccess: function(response) {\n\t\t\t\t\t// Redirect to experiment page\n\t\t\t\t\twindow.location = app.urls.run_experiment + app.getExperimentId();\n\t\t\t\t},\n\n\t\t\t\terror: function(response) {\n\t\t\t\t\tconsole.log(response.responseText);\n\t\t\t\t\tMaterialize.toast(response.responseText, 4000);\n\t\t\t\t}\n\t\t\t});\n\n\t\t} else {\n\t\t\tMaterialize.toast('Ihr Nutzername entspricht nicht dem Muster.', 4000);\n\t\t}\n\t},\n\n});\n\nif (window.location.pathname.startsWith('/login-experiment')) {\n\tnew app.SubjectLoginView();\n}"],"sourceRoot":"/source/"}